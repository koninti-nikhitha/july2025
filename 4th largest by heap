class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        heap=[]
        for num in nums:
            heapq.heappush(heap,num)
            if(len(heap)>k):
                heapq.heappop(heap)
        return heap[0]
dry run
ums = [3, 2, 1, 5, 6, 4]
k = 3
We keep only the largest 3 numbers in the heap.
Step	Current num	Heap after push	Pop if heap > 3	Heap now
1	3	[3]	—	[3]
2	2	[2, 3]	—	[2, 3]
3	1	[1, 3, 2]	—	[1, 3, 2]
4	5	[1, 3, 2, 5]	pop 1	[2, 3, 5]
5	6	[2, 3, 5, 6]	pop 2	[3, 6, 5]
6	4	[3, 4, 5, 6]	pop 3	[4, 6, 5]
Final heap: [4, 6, 5]
Smallest in heap (heap[0]) = 4
This is the 3rd largest number overall. ✅
Why this works
The heap always contains the largest k numbers seen so far.
The smallest among them (heap[0]) is the k-th largest in the whole list.
If a number is smaller than heap[0] once we have k elements, it will never be the k-th largest — so we ignore it.
If you want, I can also show this visually as a heap tree so you see why heap[0] is always the smallest among the largest k numbers. That makes it click instantly.
