# given row,colum tell the element at that place
def ncr(n, r):
    
    res = 1
    for i in range(0,r): #i=column n=row 
        res = res * (n-i) // (col+1)
    return res
n=5
r=3
print(ncr(n-1,r-1))
output:6


row=int(input())
col=int(input())
row=row-1
col=col-1
ans=1

for col in range(0,col):
    ans=ans*(row-col)//(col+1)
   
print(ans)
---------------------------------------
#print any with nth row output
def ncr(row):
    
    res = 1
    ans=[res]
    for col in range(1,row): #i=column n=row 
        res = res * (row-col) // (col)
        ans.append(res)
    return ans
row=4
print(ncr(row))


----------------------------------------
#print whole triangle
from typing import List

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        triangle = []
        for row in range(numRows):
            res = 1
            current_row = []
            for col in range(row + 1):
                current_row.append(res)
                res = res * (row - col) // (col + 1)
            triangle.append(current_row)
        return triangle
-----------
def ncr(row):
    res = 1
    ans = [res]
    for col in range(1, row):
        res = res * (row - col) // col
        ans.append(res)
    return ans
def pascals_triangle(n):
    finalans = []
    for row in range(1, n + 1):
        finalans.append(ncr(row))
    return finalans

# Example usage
rows = 4
triangle = pascals_triangle(rows)
for row in triangle:
    print(row)

âœ… Final Result (for numRows = 5):
[
 [1],
 [1, 1],
 [1, 2, 1],
 [1, 3, 3, 1],
 [1, 4, 6, 4, 1]
]

 

        
